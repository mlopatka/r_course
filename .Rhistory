plot(irisData)
#View(irisData)
# Chunk 4
# variable assignment
x=42
x
#is equivalent to
x<-42
x
#ans
42->x
x
# Chunk 5
# function definition
myFun <- function(x1,x2){
z<-(x1+x2)/2
return(z)
}
z = myFun(2,3)
z # output to console
# Chunk 6
# example fitting a linear model
x = randu # generate soem random data
fit1 = lm(y~x,x)
plot(fit1)
howells <- read.csv("~/repos/r_course/data/howells 2.csv") # load howells
howells$Sex <- factor(howells$Sex, labels = c("male","female"), levels = c("M", "F"))
z = data.frame(howells)
# data.frame($input) is the class constructor for a data frame.
howells$Sex <-factor(howells$Sex)
# isolate a singel column from the data frame and designate that categorical variable is now a FACTOR
# Chunk 8
# assignment of vectors
v = c(42,32,56,78,90,12,3,1,2,1) # vector of ints
# c is for combine
w = c("some", "stuff", "in", "a", "vector")
t = c(v,w)
rm(t) # remove a value
# Chunk 9
glassDat <- read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
glassDat$source <- factor(glassDat$X_lab_item)
glassDat$fragment <- factor(glassDat$X_lab_fragment)
# Chunk 10
# exploring the characteristics of imported data.
oldFaithfulData = faithful
head(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
tail(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
dim(oldFaithfulData) # show dimensions
names(oldFaithfulData) # show the variable names
str(oldFaithfulData)
# Chunk 11
#cars example
cars_data = mtcars;
# slice 5th row:
fifthCar = cars_data[5,]
fifthCar[4] # displays the horsepower
w_h <- dim(cars_data)
w_h[1] #display rows
w_h[2] #display columns
fifthCar$hp #displays the value of the variable after $
cars_data[c("hp", "gear")]
cars_data[23:27,] #rows 23 through 27 and all columns
# library lookup
cars_data["Ford Pantera L","gear"] # display the number fo gears for a particular entry
# vector indexing can be forced to output a datframe subset by adding the option drop=FALSE
#Exclusion indexing!
cars_data[,-4,drop=FALSE]
# Chunk 12
# specific excercise output
oldFaithfulData[110:112,c("eruptions","waiting")]
oldFaithfulData[110:112,"waiting", drop(FALSE)]
# Chunk 13
faithful2=oldFaithfulData
names(faithful2)[2] = "elapsedTime"
faithful2$eruptions[1:10]
# Chunk 14
# logical operators & | == != > < >= <=
faithful2[faithful2$eruptions > 4.9 & faithful2$elapsedTime >= 88,]
# logical indexing IMPLIES | Logical OR
head(faithful2[c(faithful2$eruptions > 4.9, faithful2$elapsedTime >= 88),],7)
# change values for subsets (RECODE)
# Chunk 15
# merging and adding information to a dataframe
dataFrameA = cars_data[,-c(5:7)] # remove certain columns
dataFrameB = cars_data[,-5:-7] # remove the same columns a different way
merge(dataFrameA,dataFrameB)
# Chunk 16
fCr <- read.csv("./data/allcran_F.csv", header = TRUE, sep = ",")
mCr <- read.csv("./data/allcran_M.csv", header = TRUE, sep = ",")
fCr[,"sex"] <- "F"
allCr <- rbind(fCr,mCr)
allCr$sex <- factor(allCr$sex, labels = c("male","female"), levels = c("M", "F"))
is.factor(allCr$sex)
# Chunk 17
aq_data <- airquality
names(aq_data)<-tolower(names(aq_data))
names(aq_data)[2]<-"solar_r"
names(aq_data)
# wide format versus long data
summary(aq_data)
aq_long <-melt(airquality)
aq_long <- melt(airquality)
??melt
reshape2::melt(aq_long)
reshape2::melt(aq_data)->aq_long
reshape2::melt(aq_long)
long_aq <- reshape2::melt(aq_long)
data.frame(reshape2::melt(aq_long))
aq_long = data.frame(reshape2::melt(aq_long))
aq_long
aq_long = data.frame(reshape2::melt(aq_long, "month", "day"))
aq_long = data.frame(reshape2::melt(aq_data, "month", "day"))
summary(aq_long)
bone_data <- read.csv("./data/PB_growth_diffs.csv", header = TRUE, sep = ",")
summary(bone_data)
tail(bone_data)
tail(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
reshape2::melt(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
melted_bones <- reshape2::melt(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
summary(melted_bones)
head(melted_bones,10)
names(melted_bones[2], "bones")
names(melted_bones) <- c("age","bone","difference")
head(melted_bones,10)
# Chunk 1: setup
setwd("~/repos/r_course/")
mode(double)
library(car)
library(knitr)
library(dplyr)
library(ggplot2)
library("klaR", lib.loc="~/Library/R/3.3/library")
knitr::opts_chunk$set(fig.path='figs/', fig.ext='eps')
# Chunk 2
# hastag is the comment leader
# This is a code chunk. It can contain any R code as specified byt he options inside {} above
sprintf( "Hello World... lets do som Fuckin' R!" )
# Chunk 3: import_data
#glassDat <-
#  read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
#plot(glassDat)
#howells <- read.csv("~/repos/r_course/data/howells 2.csv")
#View(howells)
irisData <- read.csv("~/repos/lr_gui/datasets/data_Iris.csv", header=TRUE, sep = ",")
plot(irisData)
#View(irisData)
# Chunk 4
# variable assignment
x=42
x
#is equivalent to
x<-42
x
#ans
42->x
x
# Chunk 5
# function definition
myFun <- function(x1,x2){
z<-(x1+x2)/2
return(z)
}
z = myFun(2,3)
z # output to console
# Chunk 6
# example fitting a linear model
x = randu # generate soem random data
fit1 = lm(y~x,x)
plot(fit1)
howells <- read.csv("~/repos/r_course/data/howells 2.csv") # load howells
howells$Sex <- factor(howells$Sex, labels = c("male","female"), levels = c("M", "F"))
z = data.frame(howells)
# data.frame($input) is the class constructor for a data frame.
howells$Sex <-factor(howells$Sex)
# isolate a singel column from the data frame and designate that categorical variable is now a FACTOR
# Chunk 8
# assignment of vectors
v = c(42,32,56,78,90,12,3,1,2,1) # vector of ints
# c is for combine
w = c("some", "stuff", "in", "a", "vector")
t = c(v,w)
rm(t) # remove a value
# Chunk 9
glassDat <- read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
glassDat$source <- factor(glassDat$X_lab_item)
glassDat$fragment <- factor(glassDat$X_lab_fragment)
# Chunk 10
# exploring the characteristics of imported data.
oldFaithfulData = faithful
head(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
tail(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
dim(oldFaithfulData) # show dimensions
names(oldFaithfulData) # show the variable names
str(oldFaithfulData)
# Chunk 11
#cars example
cars_data = mtcars;
# slice 5th row:
fifthCar = cars_data[5,]
fifthCar[4] # displays the horsepower
w_h <- dim(cars_data)
w_h[1] #display rows
w_h[2] #display columns
fifthCar$hp #displays the value of the variable after $
cars_data[c("hp", "gear")]
cars_data[23:27,] #rows 23 through 27 and all columns
# library lookup
cars_data["Ford Pantera L","gear"] # display the number fo gears for a particular entry
# vector indexing can be forced to output a datframe subset by adding the option drop=FALSE
#Exclusion indexing!
cars_data[,-4,drop=FALSE]
# Chunk 12
# specific excercise output
oldFaithfulData[110:112,c("eruptions","waiting")]
oldFaithfulData[110:112,"waiting", drop(FALSE)]
# Chunk 13
faithful2=oldFaithfulData
names(faithful2)[2] = "elapsedTime"
faithful2$eruptions[1:10]
# Chunk 14
# logical operators & | == != > < >= <=
faithful2[faithful2$eruptions > 4.9 & faithful2$elapsedTime >= 88,]
# logical indexing IMPLIES | Logical OR
head(faithful2[c(faithful2$eruptions > 4.9, faithful2$elapsedTime >= 88),],7)
# change values for subsets (RECODE)
# Chunk 15
# merging and adding information to a dataframe
dataFrameA = cars_data[,-c(5:7)] # remove certain columns
dataFrameB = cars_data[,-5:-7] # remove the same columns a different way
merge(dataFrameA,dataFrameB)
# Chunk 16
fCr <- read.csv("./data/allcran_F.csv", header = TRUE, sep = ",")
mCr <- read.csv("./data/allcran_M.csv", header = TRUE, sep = ",")
fCr[,"sex"] <- "F"
allCr <- rbind(fCr,mCr)
allCr$sex <- factor(allCr$sex, labels = c("male","female"), levels = c("M", "F"))
is.factor(allCr$sex)
# Chunk 17
aq_data <- airquality
names(aq_data)<-tolower(names(aq_data))
names(aq_data)[2]<-"solar_r"
names(aq_data)
summary(aq_data)
aq_long <-melt(airquality)
# wide format versus long data
reshape2::melt(aq_data)->aq_long
aq_long = data.frame(reshape2::melt(aq_long))
aq_long = data.frame(reshape2::melt(aq_data, "month", "day"))
# Chunk 18
bone_data <- read.csv("./data/PB_growth_diffs.csv", header = TRUE, sep = ",")
melted_bones <- reshape2::melt(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
names(melted_bones) <- c("age","bone","difference")
# Chunk 1: setup
setwd("~/repos/r_course/")
mode(double)
library(car)
library(knitr)
library(dplyr)
library(ggplot2)
library("klaR", lib.loc="~/Library/R/3.3/library")
knitr::opts_chunk$set(fig.path='figs/', fig.ext='eps')
# Chunk 2
# hastag is the comment leader
# This is a code chunk. It can contain any R code as specified byt he options inside {} above
sprintf( "Hello World... lets do som Fuckin' R!" )
# Chunk 3: import_data
#glassDat <-
#  read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
#plot(glassDat)
#howells <- read.csv("~/repos/r_course/data/howells 2.csv")
#View(howells)
irisData <- read.csv("~/repos/lr_gui/datasets/data_Iris.csv", header=TRUE, sep = ",")
plot(irisData)
#View(irisData)
# Chunk 4
# variable assignment
x=42
x
#is equivalent to
x<-42
x
#ans
42->x
x
# Chunk 5
# function definition
myFun <- function(x1,x2){
z<-(x1+x2)/2
return(z)
}
z = myFun(2,3)
z # output to console
# Chunk 6
# example fitting a linear model
x = randu # generate soem random data
fit1 = lm(y~x,x)
plot(fit1)
howells <- read.csv("~/repos/r_course/data/howells 2.csv") # load howells
howells$Sex <- factor(howells$Sex, labels = c("male","female"), levels = c("M", "F"))
z = data.frame(howells)
# data.frame($input) is the class constructor for a data frame.
howells$Sex <-factor(howells$Sex)
# isolate a singel column from the data frame and designate that categorical variable is now a FACTOR
# Chunk 8
# assignment of vectors
v = c(42,32,56,78,90,12,3,1,2,1) # vector of ints
# c is for combine
w = c("some", "stuff", "in", "a", "vector")
t = c(v,w)
rm(t) # remove a value
# Chunk 9
glassDat <- read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
glassDat$source <- factor(glassDat$X_lab_item)
glassDat$fragment <- factor(glassDat$X_lab_fragment)
# Chunk 10
# exploring the characteristics of imported data.
oldFaithfulData = faithful
head(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
tail(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
dim(oldFaithfulData) # show dimensions
names(oldFaithfulData) # show the variable names
str(oldFaithfulData)
# Chunk 11
#cars example
cars_data = mtcars;
# slice 5th row:
fifthCar = cars_data[5,]
fifthCar[4] # displays the horsepower
w_h <- dim(cars_data)
w_h[1] #display rows
w_h[2] #display columns
fifthCar$hp #displays the value of the variable after $
cars_data[c("hp", "gear")]
cars_data[23:27,] #rows 23 through 27 and all columns
# library lookup
cars_data["Ford Pantera L","gear"] # display the number fo gears for a particular entry
# vector indexing can be forced to output a datframe subset by adding the option drop=FALSE
#Exclusion indexing!
cars_data[,-4,drop=FALSE]
# Chunk 12
# specific excercise output
oldFaithfulData[110:112,c("eruptions","waiting")]
oldFaithfulData[110:112,"waiting", drop(FALSE)]
# Chunk 13
faithful2=oldFaithfulData
names(faithful2)[2] = "elapsedTime"
faithful2$eruptions[1:10]
# Chunk 14
# logical operators & | == != > < >= <=
faithful2[faithful2$eruptions > 4.9 & faithful2$elapsedTime >= 88,]
# logical indexing IMPLIES | Logical OR
head(faithful2[c(faithful2$eruptions > 4.9, faithful2$elapsedTime >= 88),],7)
# change values for subsets (RECODE)
# Chunk 15
# merging and adding information to a dataframe
dataFrameA = cars_data[,-c(5:7)] # remove certain columns
dataFrameB = cars_data[,-5:-7] # remove the same columns a different way
merge(dataFrameA,dataFrameB)
# Chunk 16
fCr <- read.csv("./data/allcran_F.csv", header = TRUE, sep = ",")
mCr <- read.csv("./data/allcran_M.csv", header = TRUE, sep = ",")
fCr[,"sex"] <- "F"
allCr <- rbind(fCr,mCr)
allCr$sex <- factor(allCr$sex, labels = c("male","female"), levels = c("M", "F"))
is.factor(allCr$sex)
# Chunk 17
aq_data <- airquality
names(aq_data)<-tolower(names(aq_data))
names(aq_data)[2]<-"solar_r"
names(aq_data)
summary(aq_data)
aq_long <- reshape2::melt(airquality)
# wide format versus long data
reshape2::melt(aq_data)->aq_long
aq_long = data.frame(reshape2::melt(aq_long))
aq_long = data.frame(reshape2::melt(aq_data, "month", "day"))
# Chunk 18
bone_data <- read.csv("./data/PB_growth_diffs.csv", header = TRUE, sep = ",")
melted_bones <- reshape2::melt(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
names(melted_bones) <- c("age","bone","difference")
# Chunk 1: setup
setwd("~/repos/r_course/")
mode(double)
library(car)
library(knitr)
library(dplyr)
library(ggplot2)
library("klaR", lib.loc="~/Library/R/3.3/library")
knitr::opts_chunk$set(fig.path='figs/', fig.ext='eps')
# Chunk 2
# hastag is the comment leader
# This is a code chunk. It can contain any R code as specified byt he options inside {} above
sprintf( "Hello World... lets do som Fuckin' R!" )
# Chunk 3: import_data
#glassDat <-
#  read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
#plot(glassDat)
#howells <- read.csv("~/repos/r_course/data/howells 2.csv")
#View(howells)
irisData <- read.csv("~/repos/lr_gui/datasets/data_Iris.csv", header=TRUE, sep = ",")
plot(irisData)
#View(irisData)
# Chunk 4
# variable assignment
x=42
x
#is equivalent to
x<-42
x
#ans
42->x
x
# Chunk 5
# function definition
myFun <- function(x1,x2){
z<-(x1+x2)/2
return(z)
}
z = myFun(2,3)
z # output to console
# Chunk 6
# example fitting a linear model
x = randu # generate soem random data
fit1 = lm(y~x,x)
plot(fit1)
howells <- read.csv("~/repos/r_course/data/howells 2.csv") # load howells
howells$Sex <- factor(howells$Sex, labels = c("male","female"), levels = c("M", "F"))
z = data.frame(howells)
# data.frame($input) is the class constructor for a data frame.
howells$Sex <-factor(howells$Sex)
# isolate a singel column from the data frame and designate that categorical variable is now a FACTOR
# Chunk 8
# assignment of vectors
v = c(42,32,56,78,90,12,3,1,2,1) # vector of ints
# c is for combine
w = c("some", "stuff", "in", "a", "vector")
t = c(v,w)
rm(t) # remove a value
# Chunk 9
glassDat <- read.csv("~/repos/lr_gui/datasets/data_zadoraGlass.csv", header = TRUE, sep = ",")
glassDat$source <- factor(glassDat$X_lab_item)
glassDat$fragment <- factor(glassDat$X_lab_fragment)
# Chunk 10
# exploring the characteristics of imported data.
oldFaithfulData = faithful
head(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
tail(oldFaithfulData,5) # examine the head fo the data (specify number of elements)
dim(oldFaithfulData) # show dimensions
names(oldFaithfulData) # show the variable names
str(oldFaithfulData)
# Chunk 11
#cars example
cars_data = mtcars;
# slice 5th row:
fifthCar = cars_data[5,]
fifthCar[4] # displays the horsepower
w_h <- dim(cars_data)
w_h[1] #display rows
w_h[2] #display columns
fifthCar$hp #displays the value of the variable after $
cars_data[c("hp", "gear")]
cars_data[23:27,] #rows 23 through 27 and all columns
# library lookup
cars_data["Ford Pantera L","gear"] # display the number fo gears for a particular entry
# vector indexing can be forced to output a datframe subset by adding the option drop=FALSE
#Exclusion indexing!
cars_data[,-4,drop=FALSE]
# Chunk 12
# specific excercise output
oldFaithfulData[110:112,c("eruptions","waiting")]
oldFaithfulData[110:112,"waiting", drop(FALSE)]
# Chunk 13
faithful2=oldFaithfulData
names(faithful2)[2] = "elapsedTime"
faithful2$eruptions[1:10]
# Chunk 14
# logical operators & | == != > < >= <=
faithful2[faithful2$eruptions > 4.9 & faithful2$elapsedTime >= 88,]
# logical indexing IMPLIES | Logical OR
head(faithful2[c(faithful2$eruptions > 4.9, faithful2$elapsedTime >= 88),],7)
# change values for subsets (RECODE)
# Chunk 15
# merging and adding information to a dataframe
dataFrameA = cars_data[,-c(5:7)] # remove certain columns
dataFrameB = cars_data[,-5:-7] # remove the same columns a different way
merge(dataFrameA,dataFrameB)
# Chunk 16
fCr <- read.csv("./data/allcran_F.csv", header = TRUE, sep = ",")
mCr <- read.csv("./data/allcran_M.csv", header = TRUE, sep = ",")
fCr[,"sex"] <- "F"
allCr <- rbind(fCr,mCr)
allCr$sex <- factor(allCr$sex, labels = c("male","female"), levels = c("M", "F"))
is.factor(allCr$sex)
# Chunk 17
aq_data <- airquality
names(aq_data)<-tolower(names(aq_data))
names(aq_data)[2]<-"solar_r"
names(aq_data)
summary(aq_data)
aq_long <- reshape2::melt(airquality)
# wide format versus long data
reshape2::melt(aq_data)->aq_long
aq_long = data.frame(reshape2::melt(aq_long))
aq_long = data.frame(reshape2::melt(aq_data, "month", "day"))
# Chunk 18
bone_data <- read.csv("./data/PB_growth_diffs.csv", header = TRUE, sep = ",")
melted_bones <- reshape2::melt(bone_data[c("age","hum_diff","rad_diff","tib_diff")])
names(melted_bones) <- c("age","bone","difference")
head(melted_bones, 10)
exit
quit
quit()
